# http://go-talks.appspot.com/github.com/pradippatil/tutorials/git/GettingStarted.slide
# http://go-talks.appspot.com/github.com/pradippatil/tutorials/git/GettingStarted.article
Learning Git
Getting Started

25 Feb 2017
Pradip Patil

https://pradippatil.github.io
@pradip__patil

Reference book: [[https://git-scm.com/book/en/v2][Pro-Git]]

* About Version Control
Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.

* Local Version Control Systems
Copy files into time-stamped directories which is error prone.
There are also systems like RCS which uses local database to keep changes under revision control (can be found in MacOS X OS - `rcs` command)
.image https://git-scm.com/book/en/v2/images/local.png _ 400


* Centralized Version Control Systems (CVSs)
CVCSs were developed to help collaborate multiple users on different systems.
Includes central server that keeps track of changes and multiple clients that check out files from central server.

    Examples: CVS, Subversion, Perforce
.image https://git-scm.com/book/en/v2/images/centralized.png _ 400

: This setup offers many advantages, especially over local VCSs. For example, everyone knows to a certain degree what everyone else on the project is doing. Administrators have fine-grained control over who can do what; and it’s far easier to administer a CVCS than it is to deal with local databases on every client.

: However, this setup also has some serious downsides. The most obvious is the single point of failure that the centralized server represents. If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they’re working on. If the hard disk the central database is on becomes corrupted, and proper backups haven’t been kept, you lose absolutely everything – the entire history of the project except whatever single snapshots people happen to have on their local machines. Local VCS systems suffer from this same problem – whenever you have the entire history of the project in a single place, you risk losing everything.


* Distributed Version Control Systems (DVCs)
In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don’t just check out the latest snapshot of the files: they fully mirror the repository. Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it. Every clone is really a full backup of all the data.

.image https://git-scm.com/book/en/v2/images/distributed.png _ 300

* A Short History of Git
Since its birth in 2005, Git has evolved and matured to be easy to use. It’s incredibly fast, it’s very efficient with large projects, and it has an incredible branching system for non-linear development 

.link https://git-scm.com/book/en/v2/Getting-Started-A-Short-History-of-Git Read More


* Git Basics

1. Snapshots, Not Differences:

The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data.
- CVCSs : These systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to each file over time.
.image https://git-scm.com/book/en/v2/images/deltas.png _ 700

* 
Git doesn’t think of or store its data this way. Instead, Git thinks of its data more like a set of snapshots of a miniature filesystem. Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots.
.image https://git-scm.com/book/en/v2/images/snapshots.png _ 700

* 
2. Nearly Every Operation Is Local:

Most operations in Git only need local files and resources to operate – generally no information is needed from another computer on your network. If you’re used to a CVCS where most operations have that network latency overhead, this aspect of Git will make you think that the gods of speed have blessed Git with unworldly powers. Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous.



* 
3. Git Has Integrity:

Everything in Git is check-summed before it is stored and is then referred to by that checksum. This means it’s impossible to change the contents of any file or directory without Git knowing about it. This functionality is built into Git at the lowest levels and is integral to its philosophy. You can’t lose information in transit or get file corruption without Git being able to detect it.

The mechanism that Git uses for this checksumming is called a SHA-1 hash. This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git. A SHA-1 hash looks something like this:

24b9da6552252987aa493b52f8696cd6d3b00373
You will see these hash values all over the place in Git because it uses them so much. In fact, Git stores everything in its database not by file name but by the hash value of its contents.